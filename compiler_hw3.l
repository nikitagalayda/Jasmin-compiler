/* Definition section */
%{
#include <string.h>
#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include "y.tab.h"	/* header file generated by bison */
#define BUF_SIZE 1024

extern void yyerror(char*);

int line_number = 1;
extern YYSTYPE yylval; //YYSTYPE
extern char error_msg[128];
extern bool semantic_error;
char buf[BUF_SIZE];
int is_rcb = 0;

/* This macro is used to record code line */
#define CONCAT { strncat(buf, yytext, BUF_SIZE - strlen(buf) - 1); }
%}

/* Define regular expression label */
digit		[0-9]
letter		[a-zA-Z]
integer     {digit}+
float       {digit}+"."{digit}+
id			{letter}+({letter}|{digit})*

%option yylineno

%x COMMENT STRING_STATE

/* Rules section */
%%

 /* Arithmetic */
"+"     { CONCAT return ADD; }
"-" 	{ CONCAT return SUB; }
"*" 	{ CONCAT return MUL; }
"/" 	{ CONCAT return DIV; }
"%"     { CONCAT return MOD; }
"++"    { CONCAT return INC; }
"--"    { CONCAT return DEC; }

 /* Relational */
">"		{ CONCAT return MT; }
"<"		{ CONCAT return LT; }
">="	{ CONCAT return MTE; }
"<="	{ CONCAT return LTE; }
"=="	{ CONCAT return EQ; }
"!="	{ CONCAT return NE; }

 /* Assignment */
"="		{ CONCAT return ASGN; }
"+="	{ CONCAT return ADDASGN; }
"-="	{ CONCAT return SUBASGN; }
"*="	{ CONCAT return MULASGN; }
"/="	{ CONCAT return DIVASGN; }
"%="	{ CONCAT return MODASGN; }

 /* Logical */
"&&"	{ CONCAT return AND; }
"||"	{ CONCAT return OR; }
"!"		{ CONCAT return NOT; }

 /* Delimiters */
"("		{ CONCAT return LB; }
")"		{ CONCAT return RB; }
"{"		{ CONCAT return LCB; }
"}"		{ CONCAT
            printf("%d: %s", line_number++, buf); 
            is_rcb = 1; 
            memset(buf, '\0', BUF_SIZE); 
            return RCB; 
        }
"["		{ CONCAT return LSB; }
"]"		{ CONCAT return RSB; }
","		{ CONCAT return COMMA; }

 /* Print Keywords */	
"print"		{ CONCAT return PRINT; }

 /* Condition and Loop Keywords */
"if"		{ CONCAT return IF; }
"else"		{ CONCAT return ELSE; }
"for"		{ CONCAT return FOR; }
"while"		{ CONCAT return WHILE; }

 /* Declaration Keywords */
"void"		{ CONCAT return VOID; }
"int"		{ CONCAT return INT; }
"float"  	{ CONCAT return FLOAT; }
"string"  	{ CONCAT return STRING; }
"bool"  	{ CONCAT return BOOL; }

 /* boolean Keywords */
"true"      { CONCAT return TRUE; }
"false"     { CONCAT return FALSE; }

"return"    { CONCAT return RET; }

 /* String Constant */
\"				        { BEGIN STRING_STATE; CONCAT return QUOTA; }
<STRING_STATE>\"		{ BEGIN INITIAL; CONCAT return QUOTA; }
<STRING_STATE>[^"]*		{ CONCAT return STR_CONST; }

 /* Number Constant */
{integer}	{ CONCAT yylval.i_val=atoi(yytext); return I_CONST; }
{float}	    { CONCAT yylval.f_val=atof(yytext); return F_CONST; }

 /* C type Comment */
"/*"				{ CONCAT BEGIN COMMENT; }
<COMMENT>[^*\n]+	{ CONCAT }
<COMMENT>\n			{ CONCAT printf("%d: %s", line_number, buf); ++line_number, memset(buf, '\0', BUF_SIZE); }
<COMMENT>"*"		{ CONCAT }
<COMMENT>"*/"		{ CONCAT BEGIN INITIAL; }

 /* C++ type Comment */
\/\/.*	{ CONCAT }

 /* Variable ID */
 {id}       { CONCAT return ID; }

 /* others */

[;]         { CONCAT return SEMICOLON; }
[\n]        { CONCAT
    if(is_rcb) {
        is_rcb = 0;
        printf("%s", buf);
    }
    else {
        if(buf[0] == '\n') {
            printf("%d:\n", line_number++);
        }
        else {
            printf("%d: %s", line_number++, buf);
        }
    }
    if(semantic_error) {
        printf("\n|-----------------------------------------------|\n");
        printf("| Error found in line %d: %s", yylineno, buf);
        printf("| %s", error_msg);
        printf("\n|-----------------------------------------------|\n\n");
        semantic_error = false;
        memset(error_msg, 0, sizeof(error_msg));
    }
    memset(buf, 0, BUF_SIZE);
}
[ \t]		{ CONCAT } /* Ignore */
[^ \t\n] 	{ } /* Ignore other charactor sets */
<<EOF>>     { return EOF; }

%%

int yywrap()
{
    return 1;
}
